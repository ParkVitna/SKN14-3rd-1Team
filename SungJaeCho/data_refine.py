# -*- coding: utf-8 -*-
"""data_refine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qO5cmLv-4W7TBNXBW1BOdGKwpSktEsLa
"""

!pip install langchain langchain-openai langchain-pinecone langchain-community

from google.colab import userdata
import os

os.environ['LANGSMITH_TRACING'] = userdata.get('LANGSMITH_TRACING')
os.environ['LANGSMITH_ENDPOINT'] = userdata.get('LANGSMITH_ENDPOINT')
os.environ['LANGSMITH_API_KEY'] = userdata.get('LANGSMITH_API_KEY')
os.environ['LANGSMITH_PROJECT'] = userdata.get('LANGSMITH_PROJECT')
os.environ['OPENAI_API_KEY'] = userdata.get('OPENAI_API_KEY')

os.environ['OPENAI_EMBEDDING_MODEL'] = userdata.get('OPENAI_EMBEDDING_MODEL')
os.environ['PINECONE_API_KEY'] = userdata.get('PINECONE_API_KEY')

"""## API -> 문서"""

import requests
from langchain_core.documents import Document

def json_to_documents(api_json: dict) -> list[Document]:
    documents = []

    for entry in api_json['body']['items']:
        data = entry['item']

        # Helper function to get and strip a value, handling None
        def get_and_strip(data_dict, key):
            value = data_dict.get(key)
            return value.strip() if isinstance(value, str) else ''

        # page_content 구성
        text = f"""
제품명: {get_and_strip(data, 'PRDUCT')}
제조사: {get_and_strip(data, 'ENTRPS')}
기능성: {get_and_strip(data, 'MAIN_FNCTN')}
섭취 시 주의사항: {get_and_strip(data, 'INTAKE_HINT1')}
보관조건: {get_and_strip(data, 'PRSRV_PD')}
유통기한: {get_and_strip(data, 'DISTB_PD')}
"""

        # metadata 구성
        metadata = {
            "등록일자": data.get("STTEMNT_NO"),
            "제조사": data.get("ENTRPS"),
            "기준규격": get_and_strip(data, "BASE_STANDARD")
        }

        # Document 생성
        documents.append(Document(page_content=text, metadata=metadata))

    return documents


def fetch_all_documents(api_url, api_key, num_of_rows=100) -> list[Document]:
    all_documents = []

    # 먼저 1페이지 호출
    params = {
        "ServiceKey": api_key,
        "pageNo": "1",
        "numOfRows": str(num_of_rows),
        "type": "json",
    }

    response = requests.get(api_url, params=params, timeout=10)
    response.raise_for_status()
    first_page = response.json()

    total_count = int(first_page['body']['totalCount'])
    total_pages = (total_count // num_of_rows) + (1 if total_count % num_of_rows else 0)

    # 1페이지 → Document 추출
    all_documents.extend(json_to_documents(first_page))

    # 2페이지부터 마지막 페이지까지 반복
    for page in range(2, total_pages + 1):
        params['pageNo'] = str(page)
        response = requests.get(api_url, params=params, timeout=10)
        response.raise_for_status()
        page_json = response.json()

        docs = json_to_documents(page_json)
        all_documents.extend(docs)
        print(f"📄 {page}/{total_pages} 페이지 수집 완료")

    print(f"\n✅ 총 {len(all_documents)}개의 Document 객체 생성 완료")
    return all_documents

url = 'http://apis.data.go.kr/1471000/HtfsInfoService03/getHtfsItem01'
api_key = 'nsfVX4dKQRFTeyldmuRefFQqL8xOsDkkyw8TsU4dA4fO9vq7Zl7JTbrakHnVYBqRG62CWBhhOVwBaGgCBbm3AA=='

documents = fetch_all_documents(url, api_key)
print(documents[0].page_content)
print(documents[0].metadata)

print(documents[41000].page_content)
print(documents[41000].metadata)

"""## 문서 -> 벡터스토어"""

# 문서로부터 벡터스토어 생성
from langchain_openai import OpenAIEmbeddings
from langchain_pinecone import PineconeVectorStore
from langchain.text_splitter import RecursiveCharacterTextSplitter
from pinecone import Pinecone
import time
import os


# 임베딩 모델
embeddings = OpenAIEmbeddings(model=os.environ['OPENAI_EMBEDDING_MODEL'])

# 문서 분할
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
split_documents = text_splitter.split_documents(documents)

# Pinecone 생성
pinecone_api_key = os.environ.get('PINECONE_API_KEY')

pc = Pinecone(api_key=pinecone_api_key)

index_name = 'health-supplement-rag'

# index 만들어논거 없으면 새로 생성
if index_name not in pc.list_indexes().names():
    pc.create_index(
        name=index_name,
        dimension=embeddings.get_dimension(),
        metric='cosine'
    )
    #
    while not pc.describe_index(index_name).status['ready']:
        time.sleep(1)

vector_store = PineconeVectorStore(index_name=index_name, embedding=embeddings)

# 배치로 밀어 넣기
batch_size = 100  # 배치사이즈 지정
for i in range(0, len(split_documents), batch_size):
    batch = split_documents[i:i + batch_size]
    # vector_store.add_documents(batch)
    print(f"Added batch {i//batch_size + 1}/{(len(split_documents)//batch_size) + 1}")

print("\n✅ All documents added to Pinecone vector store.")

# 존재하는 인덱스에 접근/검색
from pprint import pprint

retriever = vector_store.as_retriever(
    search_type='similarity',
    search_kwargs={'k': 3} # 유사한 문서 3개까지 검색
)
pprint(retriever.invoke('피로개선에 도움이 되는 영양제는?'))

"""## RAG 구성 (Retriever + LLM → 최종 답변 생성) 단계"""

from langchain_openai import ChatOpenAI

llm = ChatOpenAI(
    model_name="gpt-4.1-mini",  #
    temperature=0.3, # 0.3 답변이 신중하고 일관
    max_tokens=512
)

from langchain.chains import RetrievalQA

qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    retriever=retriever,           # Step 4에서 만든 것
    chain_type="stuff",            # "stuff"는 검색 결과를 LLM에 다 넘김
    return_source_documents=True   # 🔍 근거 문서 포함 응답
)

query = "아 똥이 안나와"

response = qa_chain(query)

print("🧠 GPT 응답:")
print(response['result'])
# print("\n📎 참고 문서:")
# for doc in response['source_documents']:
#     print(doc.page_content)
#     print("-" * 60)